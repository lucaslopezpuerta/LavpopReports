name: Weekly Dashboard Archive

on:
  schedule:
    # Every Sunday at 7:00 AM Brazilian time (UTC-3 = 10:00 AM UTC)
    - cron: '0 10 * * 0'
  workflow_dispatch: # Allow manual trigger

jobs:
  archive-dashboard:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GH_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install dependencies
      run: |
        npm install puppeteer

    - name: Calculate week dates
      id: dates
      run: |
        # Calculate Saturday (end of business week)
        END_DATE=$(date -d "last saturday" +%Y-%m-%d)
        # Calculate Sunday (start of business week) 
        START_DATE=$(date -d "$END_DATE -6 days" +%Y-%m-%d)
        
        echo "end_date=$END_DATE" >> $GITHUB_OUTPUT
        echo "start_date=$START_DATE" >> $GITHUB_OUTPUT
        echo "folder_name=$END_DATE" >> $GITHUB_OUTPUT

    - name: Generate dashboard PDF
      run: |
        cat > generate-pdf.js << 'EOF'
        const puppeteer = require('puppeteer');
        const fs = require('fs');
        const path = require('path');

        async function generateDashboardPDF() {
          const browser = await puppeteer.launch({
            headless: true,
            args: ['--no-sandbox', '--disable-setuid-sandbox']
          });
          
          const page = await browser.newPage();
          
          // Set viewport for consistent rendering
          await page.setViewport({ width: 1200, height: 800 });
          
          // Navigate to dashboard (replace with your actual URL)
          await page.goto('https://lucaslopezpuerta.github.io/LavpopReports/index.html', {
            waitUntil: 'networkidle2',
            timeout: 60000
          });
          
          // Wait for charts to load (up to 60 seconds)
          await page.evaluate(() => {
            return new Promise((resolve) => {
              let attempts = 0;
              const checkCharts = () => {
                const charts = document.querySelectorAll('.chart-content svg');
                const loadedCharts = Array.from(charts).filter(svg => 
                  svg.querySelectorAll('*').length > 10
                ).length;
                
                if (loadedCharts >= charts.length * 0.8 || attempts > 60) {
                  resolve();
                } else {
                  attempts++;
                  setTimeout(checkCharts, 1000);
                }
              };
              checkCharts();
            });
          });

          // Extract metadata from dashboard
          const metadata = await page.evaluate((startDate, endDate) => {
            const getTextContent = (selector) => {
              const el = document.querySelector(selector);
              return el ? el.textContent.trim() : 'N/A';
            };

            return {
              netRevenue: getTextContent('.kpi-card:nth-child(1) .kpi-value'),
              totalCycles: getTextContent('.kpi-card:nth-child(2) .kpi-value'),
              utilization: getTextContent('.kpi-card:nth-child(3) .kpi-value'),
              generatedAt: new Date().toISOString(),
              weekStart: startDate,
              weekEnd: endDate
            };
          }, process.env.START_DATE, process.env.END_DATE);

          // Generate PDF
          const pdfBuffer = await page.pdf({
            format: 'A4',
            margin: { top: '1cm', right: '1cm', bottom: '1cm', left: '1cm' },
            printBackground: true,
            preferCSSPageSize: true
          });

          await browser.close();

          // Create archive directory
          const archiveDir = `archive/${process.env.END_DATE}`;
          if (!fs.existsSync(archiveDir)) {
            fs.mkdirSync(archiveDir, { recursive: true });
          }

          // Save PDF
          const pdfPath = `${archiveDir}/Lavpop Analytics Dashboard - ${process.env.START_DATE} to ${process.env.END_DATE}.pdf`;
          fs.writeFileSync(pdfPath, pdfBuffer);

          // Save metadata
          const metadataPath = `${archiveDir}/metadata.json`;
          fs.writeFileSync(metadataPath, JSON.stringify(metadata, null, 2));

          console.log(`Dashboard archived to ${archiveDir}`);
          console.log(`Metadata:`, metadata);
        }

        generateDashboardPDF().catch(console.error);
        EOF

        START_DATE=${{ steps.dates.outputs.start_date }} \
        END_DATE=${{ steps.dates.outputs.end_date }} \
        node generate-pdf.js

    - name: Commit and push archive
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        git add archive/
        git commit -m "ðŸ“Š Weekly dashboard archive for ${{ steps.dates.outputs.start_date }} to ${{ steps.dates.outputs.end_date }}" || exit 0
        git push

    - name: Create GitHub Release (optional)
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      with:
        tag_name: archive-${{ steps.dates.outputs.end_date }}-${{ github.run_number }}
        release_name: Weekly Dashboard - ${{ steps.dates.outputs.end_date }}
        body: |
          ðŸ“Š Automated weekly dashboard archive
          
          **Week Period:** ${{ steps.dates.outputs.start_date }} to ${{ steps.dates.outputs.end_date }}
          **Generated:** ${{ steps.dates.outputs.end_date }} at 3:00 AM BRT
          
          View the dashboard PDF in the archive folder.
        draft: false
        prerelease: false
